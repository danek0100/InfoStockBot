import vk_api.vk_api
from vk_api.bot_longpoll import VkBotLongPoll
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.upload import VkUpload
import threading

from firebase_class import FireBase
import user as user_lib

import datetime as dt
from time import sleep

import bs4 as bs4
import requests
import dataframe_image as dfi
import matplotlib.pyplot as plt

import yfinance as yf
import investpy as ip

import os

link_on_pay = os.environ['LINK_ON_PAY']
vk_api_token = os.environ['VK_API_TOKEN']
vk_group_id = os.environ['VK_GROUP_ID']

vk_session = vk_api.VkApi(token=vk_api_token)
P_M_Long_poll = VkBotLongPoll(vk_session, group_id=vk_group_id)


class StocksChecker(threading.Thread):
    def __init__(self, firebase, server_):
        threading.Thread.__init__(self)
        self.fb = firebase
        self.server = server_

    def run(self):
        while True:
            try:
                users = self.fb.get_users()
                checking_prices_t(users, self.server)
                self.fb.update_users(users)
            except Exception as e:
                print(e)
                sleep(5)
                continue
            sleep(300)


class SubscriptionChecker(threading.Thread):
    def __init__(self, firebase, server_):
        threading.Thread.__init__(self)
        self.fb = firebase
        self.server = server_

    def run(self):
        while True:
            try:
                users = self.fb.get_users()
                checking_subscription(users, self.server)
                # checking_differences(self.server)
            except Exception as e:
                print(e)
                sleep(5)
                continue
            sleep(86400)


class Server:
    def __init__(self, api_token, group_id, server_name: str = "Empty"):
        self.server_name = server_name
        self.vk = vk_api.VkApi(token=api_token)
        self.long_poll = VkBotLongPoll(self.vk, group_id)
        self.vk_api = self.vk.get_api()
        self.firebase = FireBase()

    def start(self):
        stocks_checker = StocksChecker(self.firebase, self)
        subscription_checker = SubscriptionChecker(self.firebase, self)
        stocks_checker.start()
        subscription_checker.start()

        while True:
            try:
                self.listening()
            except Exception:
                sleep(0.1)

    @staticmethod
    def send_a_message(user_id, msg, attachments):
        vk_session.method('messages.send', {'user_id': user_id,
                                            'random_id': get_random_id(),
                                            'message': msg,
                                            'attachment': attachments,
                                            'keyboard': None})

    @staticmethod
    def _clean_all_tag_from_str(string_line):
        result = ""
        not_skip = True
        for i in list(string_line):
            if not_skip:
                if i == "<":
                    not_skip = False
                else:
                    result += i
            else:
                if i == ">":
                    not_skip = True

        return result

    @staticmethod
    def send_message(user_id, message=None, attachment=None, keyboard=None):
        vk_session.method('messages.send', {'user_id': user_id,
                                            'random_id': get_random_id(),
                                            'message': message,
                                            'attachment': attachment,
                                            'keyboard': keyboard})

    def get_user_name_from_vk_id(self, user_id):
        request = requests.get("https://vk.com/id" + str(user_id))
        bs = bs4.BeautifulSoup(request.text, "html.parser")
        user_name = self._clean_all_tag_from_str(bs.findAll("title")[0])
        return user_name.split()[0]

    @staticmethod
    def upload_photo(upload, photo):
        response = upload.photo_messages(photo)[0]

        owner_id = response['owner_id']
        photo_id = response['id']
        access_key = response['access_key']

        return owner_id, photo_id, access_key

    @staticmethod
    def send_photo(peer_id, owner_id, photo_id, access_key):
        attachment = f'photo{owner_id}_{photo_id}_{access_key}'
        vk_session.method('messages.send', {'user_id': peer_id,
                                            'random_id': get_random_id(),
                                            'message': None,
                                            'attachment': attachment,
                                            'keyboard': None})

    def listening(self):
        vk_sessions = vk_api.VkApi(token=vk_api_token)
        sessions_api = vk_sessions.get_api()
        long_poll = VkLongPoll(vk_sessions, group_id=vk_group_id)

        while True:
            try:
                for event in long_poll.listen():
                    if event.type == VkEventType.MESSAGE_NEW:
                        if event.from_user and not event.from_me:
                            response = event.text.lower()
                            context = vk_session.method('messages.getHistory',
                                                        {'user_id': event.user_id,
                                                         'start_message_id': event.message_id,
                                                         'offset': 0, 'count': 20})['items']

                            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
                            if len(context) < 20:
                                while len(context) < 20:
                                    context.append(context[0])

                            # –í—ã–∑–æ–≤ –º–µ–Ω—é
                            if response == '–º–µ–Ω—é':
                                keyboard = create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!', keyboard=keyboard)

                            # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            elif response == "–ø—Ä–∏–≤–µ—Ç" or response == "start" or (context[0]['from_id'] == "") or \
                                    response == '–Ω–∞—á–∞—Ç—å':
                                self.send_message(event.user_id, "–ü—Ä–∏–≤–µ—Ç, " +
                                                  str(self.get_user_name_from_vk_id(event.user_id)) +
                                                  ", —Ä–∞–¥, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –∫–æ –º–Ω–µ –∑–∞–≥–ª—è–Ω—É—Ç—å, –Ω–∞–¥—é—Å—å –Ω–∞—Å –∂–¥—ë—Ç"
                                                  " –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–µ—á–µ—Å—Ç–≤–æ."
                                                  "\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –≤—Å–µ—Ö, –∞ —Ç–∞–∫ –∂–µ "
                                                  "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –î–æ–Ω–æ–≤. "
                                                  "\n–ù–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –≤ —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π —Ç—ã –Ω–µ "
                                                  "–≤—Å—Ç—Ä–µ—Ç–∏—à—å - "
                                                  "–≤—Å—ë —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ,"
                                                  " —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—É—é"
                                                  "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É.\n\n –°–µ–π—á–∞—Å –æ—Å–Ω–æ–≤–Ω–æ–π "
                                                  "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞"
                                                  " —Å–≤—è–∑–∞–Ω —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä—ã–Ω–∫–∞ –∞–∫—Ü–∏–∏"
                                                  " –ø—Ä—è–º–æ –≤ VK.\n"
                                                  "\n –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                                                  "–æ–± –∞–∫—Ü–∏—è—Ö, –æ –∏—Ö —Ü–µ–Ω–µ, –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ "
                                                  "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∞–∫–∞—Ç–æ—Ä—ã –∏ –∞–Ω–∞–ª–∏–∑, —Ç–æ—á–∫–∏ –ø–∏–≤–æ—Ç,"
                                                  " –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ü–∏–π, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
                                                  " –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è,"
                                                  " –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
                                                  "\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
                                                  " –±–æ—Ç–∞, –Ω–æ –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"
                                                  " –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤.\n\n"
                                                  "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞–¥–µ—é—Å—å –Ω–∞—Å –∂–¥—ë—Ç"
                                                  " –≤—ã–≥–æ–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞! \n–ê —Ç–µ–ø–µ—Ä—å –¥–µ—Ä–∂–∏ –º–µ–Ω—é!"
                                                  ,
                                                  keyboard=create_keyboard("–º–µ–Ω—é", self.firebase, event.user_id))

                            # –≤—ã–∑–æ–≤ –º–µ–Ω—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
                            elif response == '–ø–æ—Ä—Ç—Ñ–µ–ª—å üíº':
                                current_user = self.firebase.get_user(event.user_id)
                                if current_user != 0 and current_user.subscription != '0':
                                    self.send_message(event.user_id,
                                                      "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º",
                                                      keyboard=create_keyboard('–ü–æ—Ä—Ç—Ñ–µ–ª—å', self.firebase))

                            # –†–∞–∑–¥–µ–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
                            elif response == '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è ‚öñ':
                                current_user = self.firebase.get_user(event.user_id)
                                if current_user != 0 and current_user.subscription != '0':
                                    res = independent_analysis(current_user)
                                    if isinstance(res, str):
                                        self.send_a_message(event.user_id, res, 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    else:
                                        if res > 0.75:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–°–∏–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)

                                        elif 0.75 >= res > 0.35:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–°—Ä–µ–¥–Ω—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω",
                                                                0)

                                        elif 0.35 >= res > 0.1:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–ù–∏–∑–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω",
                                                                0)

                                        elif 0.1 >= res > 0.0:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–ê–∫—Ç–∏–≤—ã –ø–æ—á—Ç–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω",
                                                                0)

                                        elif res == 0:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–ê–∫—Ç–∏–≤—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã", 0)

                                        elif 0.0 > res > -0.1:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–ê–∫—Ç–∏–≤—ã –∏–º–µ—é—Ç –æ—á–µ–Ω—å —Å–ª–∞–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é"
                                                                           " –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ "
                                                                           "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)

                                        elif -0.1 >= res > -0.35:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–°–ª–∞–±–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ "
                                                                           "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)

                                        elif -0.35 >= res > -0.75:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–°—Ä–µ–¥–Ω—è—è –æ–±—Ä–∞—Ç–Ω–∞—è "
                                                                           "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)

                                        elif -0.75 >= res:
                                            self.send_a_message(event.user_id,
                                                                "–°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
                                                                " –ø–æ–ª –≥–æ–¥–∞ = " +
                                                                str(res) + "\n–°–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è"
                                                                           " –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)

                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))

                            # –†–∞–∑–¥–µ–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è - –º–æ–∏ –∞–∫—Ç–∏–≤—ã
                            elif response == '–º–æ–∏ –∞–∫—Ç–∏–≤—ã üìÇ':
                                current_user = self.firebase.get_user(event.user_id)
                                if current_user != 0 and current_user.subscription != '0':
                                    string = "–í–∞—à–∏ –∞–∫—Ç–∏–≤—ã\n\n"
                                    if len(current_user.unsupported_stocks) != 0:
                                        string += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∏–∫–µ –∞–∫—Ç–∏–≤—ã:\n"
                                        for stock in current_user.unsupported_stocks:
                                            string += '\n' + str(stock.id) + '. ' + stock.key + '\n–ü–æ—Å–ª–µ–¥–Ω—è—è ' + \
                                                      '–¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: ' + str(stock.last_price) + ' ' + \
                                                      str(stock.currency) + '\n'

                                            if (stock.last_price - stock.buying_price) > 0.0:
                                                string += '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ü–µ–Ω–µ: +' + str(round(stock.last_price -
                                                                                            stock.buying_price, 2)) + \
                                                          ' (+' + str(round((stock.last_price / stock.buying_price) *
                                                                            100.0 - 100, 2)) + '%)\n'
                                            else:
                                                string += '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ü–µ–Ω–µ: ' + str(round(stock.last_price -
                                                                                           stock.buying_price, 2)) + \
                                                          ' (' + str(round((stock.last_price / stock.buying_price) *
                                                                           100.0 - 100, 2)) + '%)\n'

                                            string += '–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ' + str(stock.buying_price) + ' ' + \
                                                      str(stock.currency)
                                            string += '\n–û–±—ä—ë–º: ' + str(stock.volume) + '\n\n'

                                    if len(current_user.supported_stocks) != 0:
                                        string += "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:\n"
                                        for stock in current_user.supported_stocks:
                                            string += '\n' + str(stock.id) + '. ' + stock.key + '\n–ê–∫—Ç—É–∞–ª—å–∞—è ' + \
                                                      '—Ü–µ–Ω–∞: ' + str(stock.last_price) + ' ' + str(
                                                stock.currency) + '\n'

                                            if (stock.last_price - stock.buying_price) > 0.0:
                                                string += '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ü–µ–Ω–µ: +' + str(round(stock.last_price -
                                                                                            stock.buying_price,
                                                                                            2)) + \
                                                          ' (+' + str(
                                                    round((stock.last_price / stock.buying_price) *
                                                          100.0 - 100, 2)) + '%)\n'
                                            else:
                                                string += '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ü–µ–Ω–µ: ' + str(round(stock.last_price -
                                                                                           stock.buying_price, 2)) + \
                                                          ' (' + str(round((stock.last_price / stock.buying_price) *
                                                                           100.0 - 100, 2)) + '%)\n'

                                            string += '–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ' + str(stock.buying_price) + ' ' + str(
                                                stock.currency)
                                            string += '\n–û–±—ä—ë–º: ' + str(stock.volume) + '\n'
                                            string += '–û–ø–æ–≤–µ—â–µ–Ω–∏—è: '
                                            if int(stock.tracking):
                                                string += '–î–∞\n–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ' \
                                                          + str(stock.profit_margin) + '\n–û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Ç–µ—Ä–∏: ' \
                                                          + str(stock.loss_limit) + '\n\n'
                                            else:
                                                string += '–ù–µ—Ç\n\n'

                                    if string == "–í–∞—à–∏ –∞–∫—Ç–∏–≤—ã\n\n":
                                        string = '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤'
                                    self.send_message(event.user_id, string, 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                            # –†–∞–∑–¥–µ–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            elif response == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üí∞':
                                current_user = self.firebase.get_user(event.user_id)
                                if current_user != 0 and current_user.subscription != '0':
                                    currencies = []
                                    for stock in current_user.supported_stocks:
                                        currencies.append(stock.currency)
                                    for stock in current_user.unsupported_stocks:
                                        currencies.append(stock.currency)
                                    curr_set = set(currencies)
                                    curr_counter = {}
                                    curr_counter_b = {}
                                    for curr in curr_set:
                                        curr_counter[curr] = 0.0
                                        curr_counter_b[curr] = 0.0

                                    for stock in current_user.supported_stocks:
                                        curr_counter[stock.currency] += stock.last_price * stock.volume
                                        curr_counter_b[stock.currency] += stock.buying_price * stock.volume
                                    for stock in current_user.unsupported_stocks:
                                        curr_counter[stock.currency] += stock.last_price * stock.volume
                                        curr_counter_b[stock.currency] += stock.buying_price * stock.volume

                                    result = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n\n"
                                    if len(curr_counter.keys()) == 0:
                                        result += '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç!\n\n'
                                    else:
                                        result += '–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å—é:\n'
                                        for key in curr_counter.keys():
                                            result += str(curr_counter[key]) + ' ' + key
                                            if curr_counter[key] - curr_counter_b[key] >= 0.0:
                                                result += ' (+' + str(round((curr_counter[key] / curr_counter_b[key])
                                                                            * 100 - 100, 2)) + '%)\n'
                                            else:
                                                result += ' (' + str(round((curr_counter[key] / curr_counter_b[key])
                                                                           * 100 - 100, 2)) + '%)\n'

                                    result += '\n–û–±—â–∞—è —Ü–µ–Ω–∞ –∫—É–ø–ª–µ–Ω—ã—Ö / –ø—Ä–æ–¥–∞–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤:\n'
                                    for curr in current_user.general_purchases:
                                        result += str(current_user.general_purchases[curr]) + ' / ' + \
                                                  str(current_user.general_sales[curr]) + ' ' + curr
                                        try:
                                            if current_user.general_sales[curr] - \
                                                    current_user.general_purchases[curr] > 0.0:
                                                result += ' (+' + str(round((current_user.general_sales[curr] /
                                                                             current_user.general_purchases[curr]) *
                                                                            100 - 100, 2)) + ')\n'
                                            else:
                                                result += ' (' + str(round((current_user.general_sales[curr] /
                                                                            current_user.general_purchases[curr]) *
                                                                           100 - 100, 2)) + ')\n'
                                        except ZeroDivisionError:
                                            result += ' (0.0%)\n'

                                    self.send_message(event.user_id, result, 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                            # –†–∞–∑–¥–µ–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–∫—Ç–∏–≤—ã ‚úçüèª' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", keyboard=create_keyboard('–∫—É–ø–∏–ª/–ø—Ä–æ–¥–∞–ª_2',
                                                                                                self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ûï' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ûï' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[11]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[7]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[11]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[13]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É",
                                                  keyboard=create_keyboard('–í–∞–ª—é—Ç–∞', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[7]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[9]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[11]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[13]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[15]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                current_user = self.firebase.get_user(event.user_id)
                                if len(current_user.supported_stocks) != 0 and len(current_user.unsupported_stocks) \
                                        != 0:
                                    stock_id = max(current_user.supported_stocks[-1].id + 1,
                                                   current_user.unsupported_stocks[-1].id + 1)

                                elif len(current_user.supported_stocks) == 0 and \
                                        len(current_user.unsupported_stocks) > 0:
                                    stock_id = current_user.unsupported_stocks[-1].id + 1

                                elif len(current_user.supported_stocks) != 0 and \
                                        len(current_user.unsupported_stocks) == 0:
                                    stock_id = current_user.supported_stocks[-1].id + 1
                                else:
                                    stock_id = 1
                                try:
                                    current_stock = user_lib.CustomStock(stock_id, context[6]['text'],
                                                                         context[2]['text'].lower(),
                                                                         context[4]['text'].lower(),
                                                                         context[8]['text'].lower(),
                                                                         response.lower())
                                    current_user.add_new_stock(current_stock)
                                    self.firebase.change_user(current_user)
                                    self.send_a_message(event.user_id, "–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))
                                except TypeError:
                                    self.send_a_message(event.user_id, "–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞"
                                                                       " –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–µ–¥—ë–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –†–∞–∑–¥–µ–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                current_user = self.firebase.get_user(event.user_id)
                                string = ""
                                for stock in current_user.unsupported_stocks:
                                    string += str(stock.id) + ' - ' + str(stock.key) + ', —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ' \
                                              + str(stock.buying_price) + str(stock.currency) + '\n'
                                if string == "":
                                    self.send_a_message(event.user_id, "–ê–∫—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))
                                else:
                                    self.send_a_message(event.user_id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π:\n" + string, 0)
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ id –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ id –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' \
                                    and context[4]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[6]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[8]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_a_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ id –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' \
                                    and context[6]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[7]['text'].lower() == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[8]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[10]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                try:
                                    current_user = self.firebase.get_user(event.user_id)
                                    current_stock = None
                                    for stock in current_user.unsupported_stocks:
                                        if int(stock.id) == int(context[2]['text'].lower()):
                                            current_stock = stock
                                            break

                                    current_user.unsupported_stocks.remove(current_stock)

                                    if current_stock.currency in current_user.general_sales.keys():
                                        current_user.general_purchases[str(current_stock.currency)] += \
                                            float(current_stock.buying_price) * int(current_stock.volume)
                                        current_user.general_sales[str(current_stock.currency)] += \
                                            float(response) * int(current_stock.volume)
                                    else:
                                        current_user.general_purchases[str(current_stock.currency)] = \
                                            float(current_stock.buying_price) * int(current_stock.volume)
                                        current_user.general_sales[str(current_stock.currency)] = \
                                            float(response) * int(current_stock.volume)

                                    self.firebase.change_user(current_user)
                                    self.send_a_message(event.user_id, "–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                                except TypeError:
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))
                                except ValueError:
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π id –∞–∫—Ü–∏–∏", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                            # –†–∞–∑–¥–µ–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ üìù' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))
                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ üìù' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                current_user = self.firebase.get_user(event.user_id)
                                string = ""
                                for stock in current_user.unsupported_stocks:
                                    string += str(stock.id) + ' - ' + str(stock.key) + ', –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ' \
                                              + str(stock.last_price) + str(stock.currency) + '\n'
                                if string == "":
                                    self.send_a_message(event.user_id, "–ê–∫—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))
                                else:
                                    self.send_a_message(event.user_id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π:\n" + string, 0)
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ id –∞–∫—Ç–∏–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ id –∞–∫—Ç–∏–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[4]['text'].lower() == '–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ üìù' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                self.send_a_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ id –∞–∫—Ç–∏–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[6]['text'].lower() == '–æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ üìù' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º':
                                try:
                                    current_user = self.firebase.get_user(event.user_id)
                                    current_stock = None
                                    for stock in current_user.unsupported_stocks:
                                        if int(stock.id) == int(context[2]['text'].lower()):
                                            stock.last_price = float(response)
                                            break

                                    if current_stock is None:
                                        raise ValueError

                                    self.firebase.change_user(current_user)
                                    self.send_a_message(event.user_id, "–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                                except TypeError:
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))
                                except ValueError:
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π id –∞–∫—Ü–∏–∏", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                            # –í—ã—Ö–æ–≤ –º–µ–Ω—é –ß–ó–í
                            elif response == '—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì':
                                self.send_message(event.user_id, '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª',
                                                  keyboard=create_keyboard('–≤–æ–ø—Ä–æ—Å—ã', self.firebase,
                                                                           event.user_id))

                            # –†–∞–∑–¥–µ–ª –ß–ó–í - –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç
                            elif response == '–≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—Ç ‚Åâ':
                                answer = '–°–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
                                answer += '–í–≤–æ–∂—É —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ –∏ –ø–æ–ª—É—á–∞—é –æ—à–∏–±–∫—É —Å —á–µ–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ?\n–¶–µ–Ω—É ' \
                                          '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 192.2\n\n'
                                answer += '–ü–æ—á–µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ç–∏–ø –∞–∫—Ç–∏–≤–∞, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ ' \
                                          '–∞–∫—Ü–∏—é?\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤. –û–±—Ä–∞—â–∞–µ–º ' \
                                          '–≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ \' –≤–≤–µ–¥–∏—Ç–µ \' –∏ \'–≤—ã–±–µ—Ä–∏—Ç–µ\' –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—ã–π —Å–º—ã—Å–ª, ' \
                                          '–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É, —Ç–æ –≤–≤–µ–¥–µ–Ω–∏–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π ' \
                                          '—Å—Ç—Ä–∞–Ω—ã, –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ—à–∏–±–∫–µ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã! '
                                self.send_message(event.user_id, answer, 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            # –†–∞–∑–¥–µ–ª –ß–ó–í - –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
                            elif response == '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã üö©' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))
                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã üö©' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª':
                                result = "–°—Ç—Ä–∞–Ω—ã:\n"
                                if response == '–∞–∫—Ü–∏—è':
                                    country_list = ip.stocks.get_stock_countries()
                                    for country in country_list:
                                        result += country + '\n'

                                self.send_message(event.user_id, result, 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            # –†–∞–∑–¥–µ–ª –ß–í–ó - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã
                            elif response == '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã ‚úÖ' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))
                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã ‚úÖ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª':
                                self.send_message(event.user_id,
                                                  "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É", keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã',
                                                                                             self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[4]['text'].lower() == '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã ‚úÖ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª':
                                if context[2]['text'].lower() == '–∞–∫—Ü–∏—è':
                                    try:
                                        stocks = ip.stocks.get_stocks(response)
                                        result = "–ê–∫—Ç–∏–≤—ã:\n"
                                        for stock in range(len(stocks)):
                                            result += stocks['full_name'][stock] + ' - ' + stocks['symbol'][
                                                stock] + '\n'

                                        i = 0
                                        while i < len(result):
                                            self.send_message(event.user_id, result[i:i + 4095], 0)
                                            i += 4095
                                            sleep(0.5)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    except Exception:
                                        self.send_message(event.user_id, '–û—à–∏–±–∫–∞ –≤ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!', 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))

                            # –í—ã–∑–æ–≤ –º–µ–Ω—é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                            elif response == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìñ':
                                current_user = self.firebase.get_user(event.user_id)
                                if current_user != 0 and current_user.subscription != '0':
                                    self.send_message(event.user_id,
                                                      "–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?",
                                                      keyboard=create_keyboard('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', self.firebase))

                            # –†–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ª–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–ª–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ üìà' \
                                    and context[1]['text'].lower() == '–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–ª–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ üìà' \
                                    and context[3]['text'].lower() == '–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", keyboard=create_keyboard('–ü–µ—Ä–∏–æ–¥_2',
                                                                                              self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[4]['text'].lower() == '–ª–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ üìà' \
                                    and context[5]['text'].lower() == '–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É", keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã_info',
                                                                                              self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[6]['text'].lower() == '–ª–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ üìà' \
                                    and context[7]['text'].lower() == '–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?':

                                try:
                                    if context[4]['text'].lower() == '–∞–∫—Ü–∏—è':
                                        data = self.firebase.get_prices_info(response, 'stocks')
                                        if context[2]['text'].lower() == '–¥–µ–Ω—å':
                                            data.sort(key=diff_daily)
                                            result = '–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ –∑–∞ –¥–µ–Ω—å:\n'
                                            for i in range(11):
                                                result += str((data[i]).key) + ': ' + str((data[i]).differences_daily) \
                                                          + '% \n'
                                            self.send_message(event.user_id, result, 0)
                                            self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                              keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                       event.user_id))

                                        elif context[2]['text'].lower() == '–Ω–µ–¥–µ–ª—è':
                                            data.sort(key=diff_weekly)
                                            result = '–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n'
                                            for i in range(11):
                                                result += str((data[i]).key) + ': ' + str((data[i]).differences_weekly) \
                                                          + '% \n'
                                            self.send_message(event.user_id, result, 0)
                                            self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                              keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                       event.user_id))

                                        elif context[2]['text'].lower() == '–º–µ—Å—è—Ü':
                                            data.sort(key=diff_monthly)
                                            result = '–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ –∑–∞ –º–µ—Å—è—Ü:\n'
                                            for i in range(11):
                                                result += str((data[i]).key) + ': ' + \
                                                          str((data[i]).differences_monthly) + '% \n'
                                            self.send_message(event.user_id, result, 0)
                                            self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                              keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                       event.user_id))
                                except Exception:
                                    self.send_message(event.user_id, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!', 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                            # –†–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ª–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–ª–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è üìâ' \
                                    and context[1]['text'].lower() == '–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–ª–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è üìâ' \
                                    and context[3]['text'].lower() == '–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", keyboard=create_keyboard('–ü–µ—Ä–∏–æ–¥_2',
                                                                                              self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[4]['text'].lower() == '–ª–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è üìâ' \
                                    and context[5]['text'].lower() == '–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É", keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã_info',
                                                                                              self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[6]['text'].lower() == '–ª–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è üìâ' \
                                    and context[7]['text'].lower() == '–∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞?':

                                try:
                                    if context[4]['text'].lower() == '–∞–∫—Ü–∏—è':
                                        data = self.firebase.get_prices_info(response, 'stocks')
                                        if context[2]['text'].lower() == '–¥–µ–Ω—å':
                                            data.sort(key=diff_daily, reverse=True)
                                            result = '–õ–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å:\n'
                                            for i in range(11):
                                                result += str((data[i]).key) + ': ' + str((data[i]).differences_daily) \
                                                          + '% \n'
                                            self.send_message(event.user_id, result, 0)
                                            self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                              keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                       event.user_id))

                                        elif context[2]['text'].lower() == '–Ω–µ–¥–µ–ª—è':
                                            data.sort(key=diff_weekly, reverse=True)
                                            result = '–õ–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é:\n'
                                            for i in range(11):
                                                result += str((data[i]).key) + ': ' + str((data[i]).differences_weekly) \
                                                          + '% \n'
                                            self.send_message(event.user_id, result, 0)
                                            self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                              keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                       event.user_id))

                                        elif context[2]['text'].lower() == '–º–µ—Å—è—Ü':
                                            data.sort(key=diff_monthly, reverse=True)
                                            result = '–õ–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü:\n'
                                            for i in range(11):
                                                result += str((data[i]).key) + ': ' + \
                                                          str((data[i]).differences_monthly) + '% \n'
                                            self.send_message(event.user_id, result, 0)
                                            self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                              keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                       event.user_id))
                                except Exception:
                                    self.send_message(event.user_id, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!', 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                            # –†–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–µ
                            elif response == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–µ üìÑ':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–µ üìÑ':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[4]['text'].lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–µ üìÑ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")

                            elif context[0]['from_id'] == event.user_id \
                                    and context[6]['text'].lower() == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–µ üìÑ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞':
                                active_info(self, event.user_id, response.upper(), context[2]['text'].lower(),
                                            context[4]['text'].lower())
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –≤—ã–∑–æ–≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                            elif response == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô':
                                current_user = self.firebase.get_user(event.user_id)
                                if current_user != 0 and current_user.subscription != '0':
                                    self.send_message(event.user_id,
                                                      "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å",
                                                      keyboard=create_keyboard('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', self.firebase))

                            # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '—Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üóë' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                self.send_message(event.user_id,
                                                  "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?\n"
                                                  "–í–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!",
                                                  keyboard=create_keyboard('–¥–∞/–Ω–µ—Ç', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–¥–∞' \
                                    and context[1]['text'].lower() == '–≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?\n' \
                                                                      '–≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                current_user = self.firebase.get_user(event.user_id)
                                current_user.general_sales = {'RUB': 0.0, 'USD': 0.0}
                                current_user.general_purchases = {'RUB': 0.0, 'USD': 0.0}
                                self.firebase.change_user(current_user)
                                self.send_message(event.user_id, "–°—Ç–∞—Ç–∏—Å–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!", 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–Ω–µ—Ç' \
                                    and context[1]['text'].lower() == '–≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?\n' \
                                                                      '–≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                self.send_message(event.user_id, "–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω!", 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üö´' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                self.send_message(event.user_id,
                                                  "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ\n" + str(link_on_pay) +
                                                  "\n–û—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É?",
                                                  keyboard=create_keyboard('–¥–∞/–Ω–µ—Ç', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–¥–∞' \
                                    and context[2]['text'].lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üö´' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                current_user = self.firebase.get_user(event.user_id)
                                current_user.subscription = '0'
                                self.firebase.change_user(current_user)
                                self.send_message(event.user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–Ω–µ—Ç' \
                                    and context[1]['text'].lower() == ('–≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ\n'
                                                                       + str(link_on_pay) + '\n–æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É?') \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                self.send_message(event.user_id, "–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–æ–ø–æ–≤–µ—â–µ–Ω–∏—è üì©' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                self.send_message(event.user_id,
                                                  "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏?",
                                                  keyboard=create_keyboard('–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–≤–∫–ª—é—á–∏—Ç—å' \
                                    and context[1]['text'].lower() == '—á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏?' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                current_user = self.firebase.get_user(event.user_id)
                                current_user.alerts = 1
                                self.firebase.change_user(current_user)
                                self.send_message(event.user_id, "–°—Ç–∞—Ç—É—Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω!", 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–æ—Ç–∫–ª—é—á–∏—Ç—å' \
                                    and context[1]['text'].lower() == '—á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏?' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å':
                                current_user = self.firebase.get_user(event.user_id)
                                current_user.alerts = 0
                                self.firebase.change_user(current_user)
                                self.send_message(event.user_id, "–°—Ç–∞—Ç—É—Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω!", 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            # –í—ã–∑–æ–≤ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ê–Ω–∞–ª–∏–∑
                            elif response == '–∞–Ω–∞–ª–∏–∑ üîé':
                                current_user = self.firebase.get_user(event.user_id)
                                if current_user != 0 and current_user.subscription != '0':
                                    self.send_message(event.user_id,
                                                      "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞",
                                                      keyboard=create_keyboard('–ê–Ω–∞–ª–∏–∑', self.firebase))

                            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                            elif response == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üìù' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üìù':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[4]['text'].lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üìù' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")

                            elif context[0]['from_id'] == event.user_id \
                                    and context[6]['text'].lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üìù' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ—Ö–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                                                  keyboard=create_keyboard('–ü–µ—Ä–∏–æ–¥', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[8]['text'].lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üìù' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ—Ö–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞':
                                answer = technical_analysis(context[2]['text'].lower(), context[4]['text'].lower(),
                                                            context[6]['text'].lower(), context[0]['text'].lower())

                                if isinstance(answer, str):
                                    self.send_a_message(event.user_id, answer, 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                                else:
                                    df_styled = answer.style.background_gradient()
                                    dfi.export(df_styled, "tech_table.png", table_conversion='matplotlib')

                                    upload = VkUpload(self.vk_api)

                                    active = context[2]['text'].upper()
                                    self.send_message(event.user_id, "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Ö–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è " +
                                                      active + ":", 0)

                                    self.send_photo(event.user_id, *self.upload_photo(upload, 'tech_table.png'))

                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                            elif response == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã üìä' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã üìä':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[4]['text'].lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã üìä' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")

                            elif context[0]['from_id'] == event.user_id \
                                    and context[6]['text'].lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã üìä' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–∏—á–µ—Å–∫–∏—Ö –∏–¥–∏–∫–∞—Ç–æ—Ä–æ–≤",
                                                  keyboard=create_keyboard('–ü–µ—Ä–∏–æ–¥', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[8]['text'].lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã üìä' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è' \
                                                                      ' –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–∏—á–µ—Å–∫–∏—Ö –∏–¥–∏–∫–∞—Ç–æ—Ä–æ–≤':
                                answer = technical_indicators(context[2]['text'].lower(), context[4]['text'].lower(),
                                                              context[6]['text'].lower(), context[0]['text'].lower())

                                if isinstance(answer, str):
                                    self.send_a_message(event.user_id,
                                                        answer, 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                                else:
                                    df_styled = answer.style.background_gradient()
                                    dfi.export(df_styled, "tech_ind.png", table_conversion='matplotlib')

                                    upload = VkUpload(self.vk_api)

                                    active = context[2]['text'].upper()
                                    self.send_message(event.user_id, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è " +
                                                      active + ":", 0)

                                    self.send_photo(event.user_id, *self.upload_photo(upload, 'tech_ind.png'))

                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –¢–æ—á–∫–∏ –ø–∏–≤–æ—Ç
                            elif response == '—Ç–æ—á–∫–∏ –ø–∏–≤–æ—Ç üí¢' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '—Ç–æ—á–∫–∏ –ø–∏–≤–æ—Ç üí¢':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[4]['text'].lower() == '—Ç–æ—á–∫–∏ –ø–∏–≤–æ—Ç üí¢' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")

                            elif context[0]['from_id'] == event.user_id \
                                    and context[6]['text'].lower() == '—Ç–æ—á–∫–∏ –ø–∏–≤–æ—Ç üí¢' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–µ–∫ –ø–∏–≤–æ—Ç",
                                                  keyboard=create_keyboard('–ü–µ—Ä–∏–æ–¥', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[8]['text'].lower() == '—Ç–æ—á–∫–∏ –ø–∏–≤–æ—Ç üí¢' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è' \
                                                                      ' –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–µ–∫ –ø–∏–≤–æ—Ç':
                                answer = pivot_points(context[2]['text'].lower(), context[4]['text'].lower(),
                                                      context[6]['text'].lower(), context[0]['text'].lower())

                                if isinstance(answer, str):
                                    self.send_a_message(event.user_id,
                                                        answer, 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                                else:
                                    df_styled = answer.style.background_gradient()
                                    dfi.export(df_styled, "pivot_ind.png", table_conversion='matplotlib')

                                    upload = VkUpload(self.vk_api)

                                    active = context[2]['text'].upper()
                                    self.send_message(event.user_id, "–¢–æ—á–∫–∏ –ø–∏–≤–æ—Ç –¥–ª—è " +
                                                      active + ":", 0)

                                    self.send_photo(event.user_id, *self.upload_photo(upload, 'pivot_ind.png'))

                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
                            elif response == '–≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã üìà' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã üìà':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[4]['text'].lower() == '–≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã üìà' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")

                            elif context[0]['from_id'] == event.user_id \
                                    and context[6]['text'].lower() == '–≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã üìà' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
                                                  keyboard=create_keyboard('–ü–µ—Ä–∏–æ–¥_', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[8]['text'].lower() == '–≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã üìà' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è' \
                                                                      ' –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞':
                                answer = history_of_active(context[2]['text'].lower(), context[4]['text'].lower(),
                                                           context[6]['text'].lower(), context[0]['text'].lower())

                                if isinstance(answer, str):
                                    self.send_a_message(event.user_id,
                                                        answer, 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                                else:
                                    build_graph(answer)

                                    upload = VkUpload(self.vk_api)

                                    active = context[2]['text'].upper()
                                    self.send_message(event.user_id, "–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è " +
                                                      active + ":", 0)

                                    self.send_photo(event.user_id, *self.upload_photo(upload, 'hist.png'))

                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
                            elif response == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞",
                                                  keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ':
                                self.send_message(event.user_id, "–í—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[4]['text'].lower() == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")

                            elif context[0]['from_id'] == event.user_id \
                                    and context[6]['text'].lower() == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞':

                                answer = history_of_active(context[0]['text'].lower(), context[2]['text'].lower(),
                                                           context[4]['text'].lower(), '6 –º–µ—Å—è—Ü–µ–≤')
                                if isinstance(answer, str):
                                    self.send_a_message(event.user_id, answer, 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                                else:
                                    self.send_message(event.user_id,
                                                      "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ç–æ—Ä–æ–≥–æ –∞–∫—Ç–∏–≤–∞",
                                                      keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[8]['text'].lower() == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ç–æ—Ä–æ–≥–æ –∞–∫—Ç–∏–≤–∞':

                                self.send_message(event.user_id, "–í—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[10]['text'].lower() == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ç–æ—Ä–æ–≥–æ –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É':

                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")

                            elif context[0]['from_id'] == event.user_id \
                                    and context[12]['text'].lower() == '–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ' \
                                    and context[11]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É' \
                                    and context[7]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ç–æ—Ä–æ–≥–æ –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞':

                                data_2 = history_of_active(context[0]['text'].lower(), context[2]['text'].lower(),
                                                           context[4]['text'].lower(), '6 –º–µ—Å—è—Ü–µ–≤')
                                if isinstance(data_2, str):
                                    self.send_a_message(event.user_id,
                                                        data_2, 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                                else:
                                    data_1 = history_of_active(context[6]['text'].lower(), context[8]['text'].lower(),
                                                               context[10]['text'].lower(), '6 –º–µ—Å—è—Ü–µ–≤')

                                    name_of_first = context[6]['text'].lower()
                                    name_of_second = context[0]['text'].lower()
                                    data_2 = data_2.Close
                                    table = data_1
                                    table[name_of_second] = data_2
                                    table_res = table.drop(columns=['Open', 'High', 'Low', 'Volume', 'Currency'])
                                    table_res.rename(columns={'Close': name_of_first}, inplace=True)
                                    returns = table_res.pct_change()
                                    corr = returns.corr()
                                    if round(corr[name_of_first][name_of_second], 2) > 0.75:
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–°–∏–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    elif 0.75 >= round(corr[name_of_first][name_of_second], 2) > 0.35:
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–°—Ä–µ–¥–Ω—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    elif 0.35 >= round(corr[name_of_first][name_of_second], 2) > 0.1:
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–ù–∏–∑–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    elif 0.1 >= round(corr[name_of_first][name_of_second], 2) > 0.0:
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–ê–∫—Ç–∏–≤—ã –ø–æ—á—Ç–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω",
                                                            0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    elif round(corr[name_of_first][name_of_second], 3) == 0:
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–ê–∫—Ç–∏–≤—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    elif 0.0 > round(corr[name_of_first][name_of_second], 2) > -0.1:
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–ê–∫—Ç–∏–≤—ã –∏–º–µ—é—Ç –æ—á–µ–Ω—å —Å–ª–∞–±—É—é –æ–±—Ä–∞—Ç–Ω—É—é"
                                                                            " –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ "
                                                                            "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    elif -0.1 >= round(corr[name_of_first][name_of_second], 2) > -0.35:
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–°–ª–∞–±–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ "
                                                                            "–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    elif -0.35 >= round(corr[name_of_first][name_of_second], 2) > -0.75:
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–°—Ä–µ–¥–Ω—è—è –æ–±—Ä–∞—Ç–Ω–∞—è "
                                                                            "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    elif -0.75 >= round(corr[name_of_first][name_of_second], 2):
                                        self.send_a_message(event.user_id,
                                                            "–ö–æ—ç—Ñ–∏—Ü–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª –≥–æ–¥–∞ = " +
                                                            str(round(corr[name_of_first][name_of_second],
                                                                      3)) + "\n–°–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è"
                                                                            " –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    else:
                                        self.send_a_message(event.user_id,
                                                            "–û—à–∏–±–∫–∞! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))

                            # –í—ã–∑–æ–≤ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                            elif response == '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã üìà':
                                current_user = self.firebase.get_user(event.user_id)
                                if current_user != 0 and current_user.subscription != '0':
                                    self.send_message(event.user_id,
                                                      "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                                                      keyboard=create_keyboard('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ', self.firebase))

                            # –ü–æ–¥—Ä–∞–∑–¥–µ–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ
                            elif response == '–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ ‚úâ':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞",
                                                  keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ ‚úâ':
                                self.send_message(event.user_id, "–í—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[4]['text'].lower() == '–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ ‚úâ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞")

                            elif context[0]['from_id'] == event.user_id \
                                    and context[6]['text'].lower() == '–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ ‚úâ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É' \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞':
                                self.send_a_message(event.user_id, "–ü—Ä–∏ –∫–∞–∫–æ–π —Ü–µ–Ω–µ –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å?", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[8]['text'].lower() == '–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ ‚úâ' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ (–≤–≤–µ–¥–∏—Ç–µ) —Å—Ç—Ä–∞–Ω—É' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[1]['text'].lower() == '–ø—Ä–∏ –∫–∞–∫–æ–π —Ü–µ–Ω–µ –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å?':
                                try:
                                    data_ = ip.stocks.get_stocks_overview(context[4]['text'].lower(), n_results=1000)
                                    data_ = data_.drop(
                                        columns=['name', 'country', 'turnover', 'change', 'change_percentage', 'high',
                                                 'low'])
                                    index = 0
                                    flag = 0
                                    for symbol in data_['symbol']:
                                        if symbol == context[2]['text'].upper():
                                            flag = 1
                                            break
                                        index += 1

                                    if flag:
                                        try:
                                            float(response)
                                        except ValueError:
                                            self.send_a_message(event.user_id, "–ß–∏—Å–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ!", 0)

                                        spy_stock = user_lib.SpyStock(event.user_id, context[2]['text'].upper(),
                                                                      context[4]['text'].lower(),
                                                                      response, context[6]['text'].lower())

                                        self.firebase.add_spy_stock(spy_stock)
                                        self.send_a_message(event.user_id, '–ê–∫—Ç–∏–≤ –¥–æ–±–∞–≤–ª–µ–Ω!', 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))

                                    elif context[7]['text'].lower() == '–∞–∫—Ü–∏—è':
                                        try:
                                            if context[4]['text'].lower() == 'russia':
                                                active_name = context[2]['text'].upper() + '.ME'
                                                data = yf.download(tickers=active_name, period='0')
                                                spy_stock = user_lib.SpyStock(event.user_id, context[2]['text'].upper(),
                                                                              context[4]['text'].lower(),
                                                                              context[7]['text'].lower(),
                                                                              response)
                                                self.firebase.add_spy_stock(spy_stock)
                                                self.send_a_message(event.user_id, '–ê–∫—Ç–∏–≤ –¥–æ–±–∞–≤–ª–µ–Ω!', 0)
                                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                           event.user_id))

                                            elif context[4]['text'].lower() == 'united states':
                                                active_name = context[2]['text'].upper()
                                                data = yf.download(tickers=active_name, period='0')
                                                spy_stock = user_lib.SpyStock(event.user_id, context[2]['text'].upper(),
                                                                              context[4]['text'].lower(),
                                                                              context[7]['text'].lower(),
                                                                              response)
                                                self.firebase.add_spy_stock(spy_stock)
                                                self.send_a_message(event.user_id, '–ê–∫—Ç–∏–≤ –¥–æ–±–∞–≤–ª–µ–Ω!', 0)
                                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                           event.user_id))

                                            else:
                                                self.send_a_message(event.user_id, '–ê–∫—Ç–∏–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—å—Å—è!', 0)
                                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                           event.user_id))

                                        except Exception:
                                            self.send_a_message(event.user_id, '–ê–∫—Ç–∏–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—å—Å—è!', 0)
                                            self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                              keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                       event.user_id))

                                    else:
                                        self.send_a_message(event.user_id, '–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n'
                                                                           '–ù–µ –≤—ã—à–ª–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
                                                            0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))

                                except Exception:
                                    self.send_a_message(event.user_id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!', 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –†–∞–∑–¥–µ–ª —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–æ–º
                            elif response == '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ üìå' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                                  keyboard=create_keyboard('–∫—É–ø–∏–ª/–ø—Ä–æ–¥–∞–ª', self.firebase))

                            # –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '—Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ üìú' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                current_user = self.firebase.get_user(event.user_id)
                                string = ""
                                for stock in current_user.supported_stocks:
                                    string += str(stock.id) + '. ' + str(stock.key) + \
                                              '\n–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ' + str(stock.last_price) + ' ' + str(stock.currency) \
                                              + '\n–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ' \
                                              + str(stock.buying_price) + ' ' + str(stock.currency) + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ' \
                                              + str(stock.volume) + \
                                              '\n–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: '
                                    if int(stock.tracking):
                                        string += '–î–∞\n–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ' \
                                                  + str(stock.profit_margin) + '\n–û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Ç–µ—Ä–∏: ' \
                                                  + str(stock.loss_limit) + '\n\n'
                                    else:
                                        string += '–ù–µ—Ç\n\n'

                                if string == "":
                                    string = '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤'
                                self.send_message(event.user_id, string, 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                           event.user_id))

                            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ûï' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '–¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ûï' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                                                  keyboard=create_keyboard('–°—Ç—Ä–∞–Ω—ã', self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[7]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[11]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[7]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[9]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[11]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[13]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id, "–ü—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?",
                                                  keyboard=create_keyboard('–¥–∞/–Ω–µ—Ç', self.firebase))

                            # –ë–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∞–∫—Ç–∏–≤
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–Ω–µ—Ç' \
                                    and context[1]['text'].lower() == '–ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[7]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[9]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[11]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[13]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[15]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                current_user = self.firebase.get_user(event.user_id)
                                if len(current_user.supported_stocks) != 0 and len(current_user.unsupported_stocks) \
                                        != 0:
                                    stock_id = max(current_user.supported_stocks[-1].id + 1,
                                                   current_user.unsupported_stocks[-1].id + 1)

                                elif len(current_user.supported_stocks) == 0 and \
                                        len(current_user.unsupported_stocks) > 0:
                                    stock_id = current_user.unsupported_stocks[-1].id + 1

                                elif len(current_user.supported_stocks) != 0 and \
                                        len(current_user.unsupported_stocks) == 0:
                                    stock_id = current_user.supported_stocks[-1].id + 1
                                else:
                                    stock_id = 1
                                try:
                                    current_stock = user_lib.SupportedStock(stock_id, context[6]['text'].upper(),
                                                                            context[2]['text'].lower(),
                                                                            context[4]['text'].lower(),
                                                                            context[8]['text'].lower(),
                                                                            0)
                                    result = check_stock(current_stock)
                                    if isinstance(result, str):
                                        self.send_a_message(event.user_id, "–ê–∫—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    else:
                                        current_user.add_new_sp_stock(current_stock)
                                        self.firebase.change_user(current_user)
                                        self.send_a_message(event.user_id, "–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                except TypeError:
                                    self.send_a_message(event.user_id, "–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞"
                                                                       " –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–µ–¥—ë–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∞–∫—Ç–∏–≤ —Å –æ–ø–æ–≤–µ—à–µ–Ω–∏–µ–º
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '–¥–∞' \
                                    and context[1]['text'].lower() == '–ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[7]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[9]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[11]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[13]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[15]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_a_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ % –≤—ã —Ö–æ—Ç–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ % –≤—ã —Ö–æ—Ç–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å' \
                                    and context[3]['text'].lower() == '–ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?' \
                                    and context[5]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏' \
                                    and context[7]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[9]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[11]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[13]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[15]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[17]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_a_message(event.user_id, "–°–∫–æ–ª—å–∫–æ % –≤—ã –Ω–µ –±–æ–∏—Ç–µ—Å—å –ø–æ—Ç–µ—Ä—è—Ç—å?", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '—Å–∫–æ–ª—å–∫–æ % –≤—ã –Ω–µ –±–æ–∏—Ç–µ—Å—å –ø–æ—Ç–µ—Ä—è—Ç—å?' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ % –≤—ã —Ö–æ—Ç–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å' \
                                    and context[5]['text'].lower() == '–ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?' \
                                    and context[7]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏' \
                                    and context[9]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–æ–≤' \
                                    and context[11]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' \
                                    and context[13]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º' \
                                    and context[15]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[17]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[19]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                current_user = self.firebase.get_user(event.user_id)
                                if len(current_user.supported_stocks) != 0 and len(current_user.unsupported_stocks) \
                                        != 0:
                                    stock_id = max(current_user.supported_stocks[-1].id + 1,
                                                   current_user.unsupported_stocks[-1].id + 1)

                                elif len(current_user.supported_stocks) == 0 and \
                                        len(current_user.unsupported_stocks) > 0:
                                    stock_id = current_user.unsupported_stocks[-1].id + 1

                                elif len(current_user.supported_stocks) != 0 and \
                                        len(current_user.unsupported_stocks) == 0:
                                    stock_id = current_user.supported_stocks[-1].id + 1
                                else:
                                    stock_id = 1
                                try:
                                    current_stock = user_lib.SupportedStock(stock_id, context[10]['text'].upper(),
                                                                            context[6]['text'].lower(),
                                                                            context[8]['text'].lower(),
                                                                            context[12]['text'].lower(),
                                                                            1, 0,
                                                                            round(float(context[6]['text'].lower()) + (
                                                                                    float(context[6]['text'].lower())
                                                                                    / 100)
                                                                                  * int(context[2]['text'].lower()), 2),
                                                                            round(float(context[6]['text'].lower()) -
                                                                                  (float(context[6]['text'].lower())
                                                                                   / 100)
                                                                                  * int(context[0]['text'].lower()), 2))
                                    result = check_stock(current_stock)
                                    if isinstance(result, str):
                                        self.send_a_message(event.user_id, "–ê–∫—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!", 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                    else:
                                        current_user.add_new_sp_stock(current_stock)
                                        self.firebase.change_user(current_user)
                                        self.send_a_message(event.user_id, "–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–ï—ë id = " +
                                                            str(stock_id), 0)
                                        self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   event.user_id))
                                except TypeError:
                                    self.send_a_message(event.user_id, "–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞"
                                                                       " –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–µ–¥—ë–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                            elif context[0]['from_id'] == event.user_id \
                                    and response == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and response == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_message(event.user_id,
                                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞", keyboard=create_keyboard('–¢–∏–ø –∞–∫—Ç–∏–≤–∞',
                                                                                                  self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[2]['text'].lower() == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[3]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[5]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                current_user = self.firebase.get_user(event.user_id)
                                string = ""
                                for stock in current_user.supported_stocks:
                                    string += str(stock.id) + ' - ' + str(stock.key) + ', —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ' \
                                              + str(stock.buying_price) + ' ' + str(stock.currency) + '\n'
                                if string == "":
                                    self.send_a_message(event.user_id, "–ê–∫—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))
                                else:
                                    self.send_a_message(event.user_id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π:\n" + string, 0)
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ id –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ id –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' \
                                    and context[4]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[5]['text'].lower() == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[6]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[8]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                self.send_a_message(event.user_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏", 0)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[1]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏' \
                                    and context[3]['text'].lower() == '–≤–≤–µ–¥–∏—Ç–µ id –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' \
                                    and context[6]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–∞' \
                                    and context[7]['text'].lower() == '—É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå' \
                                    and context[8]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ' \
                                    and context[10]['text'].lower() == '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è':
                                try:
                                    current_user = self.firebase.get_user(event.user_id)
                                    current_stock = None
                                    for stock in current_user.supported_stocks:
                                        if int(stock.id) == int(context[2]['text'].lower()):
                                            current_stock = stock
                                            break

                                    current_user.supported_stocks.remove(current_stock)

                                    if current_stock.currency in current_user.general_sales.keys():
                                        current_user.general_purchases[str(current_stock.currency)] += \
                                            float(current_stock.buying_price) * int(current_stock.volume)
                                        current_user.general_sales[str(current_stock.currency)] += \
                                            float(response) * int(current_stock.volume)
                                    else:
                                        current_user.general_purchases[str(current_stock.currency)] = \
                                            float(current_stock.buying_price) * int(current_stock.volume)
                                        current_user.general_sales[str(current_stock.currency)] = \
                                            float(response) * int(current_stock.volume)

                                    self.firebase.change_user(current_user)
                                    self.send_a_message(event.user_id, "–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                                except TypeError:
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))
                                except ValueError:
                                    self.send_a_message(event.user_id, "–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π id –∞–∫—Ü–∏–∏", 0)
                                    self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                      keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                               event.user_id))

                            # –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                            elif response == '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É ü§ë':
                                self.send_message(event.user_id,
                                                  "–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n"
                                                  "–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É: \n"
                                                  + str(link_on_pay))
                                self.send_message(event.user_id,
                                                  "–û—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É? ü§ó",
                                                  keyboard=create_keyboard("–¥–∞/–Ω–µ—Ç", self.firebase))

                            elif context[0]['from_id'] == event.user_id \
                                    and context[3]['text'].lower() == '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É ü§ë' \
                                    and response == '–¥–∞':
                                admins_list = self.firebase.get_admins()
                                self.send_message(event.user_id,
                                                  "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É "
                                                  "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, "
                                                  "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ"
                                                  " —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏. "
                                                  "–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
                                                  keyboard=create_keyboard("–º–µ–Ω—é", self.firebase))
                                sleep(0.5)
                                for admin in admins_list:
                                    self.send_message(admin, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + "https://vk.com/id" + str(event.user_id)
                                                      + " - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å" + " –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É. \nid " +
                                                      str(event.user_id), self.firebase)

                            elif context[0]['from_id'] == event.user_id \
                                    and context[3]['text'].lower() == '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É ü§ë' \
                                    and response == '–Ω–µ—Ç':
                                self.send_message(event.user_id,
                                                  "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ!")
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                  keyboard=create_keyboard('–º–µ–Ω—é', self.firebase, event.user_id))

                            # –†–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                            elif response == '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ':
                                admins_list = self.firebase.get_admins()
                                if int(event.user_id) in admins_list:
                                    self.send_message(event.user_id, "+++")

                            elif context[0]['from_id'] == event.user_id and context[1]['text'].lower() == '+++':
                                continue

                            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–Ω–∞
                            elif context[0]['from_id'] == event.user_id and context[2]['text'].lower() == '+++':
                                if context[1]['text'].lower() == '–ø–æ–¥–ø–∏—Å–∫–∞':
                                    if self.firebase.user_in_base(int(response)):
                                        user_ = self.firebase.get_user(int(response))
                                        day = dt.date.today() + dt.timedelta(days=32)
                                        new_format = "%d/%m/%Y"
                                        user_.subscription = day.strftime(new_format)
                                        self.firebase.change_user(user_)
                                        self.send_message(event.user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
                                        sleep(0.5)
                                        self.send_message(int(response), '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ'
                                                                         ' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   int(response)))

                                    else:
                                        day = dt.date.today() + dt.timedelta(days=30)
                                        new_format = "%d/%m/%Y"
                                        subscription = day.strftime(new_format)
                                        user = user_lib.User(int(response), subscription_=subscription)
                                        self.firebase.add_new_user(user)
                                        self.send_message(event.user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
                                        sleep(0.5)
                                        self.send_message(int(response), '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∞–∂–ª–∏ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ! '
                                                                         '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! '
                                                                         '–î–µ—Ä–∂–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   int(response)))

                                # –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–Ω–∞
                                elif context[1]['text'].lower() == '–æ—Ç–∫–∞–∑':
                                    if self.firebase.user_in_base(int(response)):
                                        self.send_message(event.user_id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                        user = self.firebase.get_user(int(response))
                                        user.subscription = 0
                                        self.firebase.change_user(user)
                                        sleep(0.5)
                                        self.send_message(int(response), '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—à—ë–ª –≤–∞—Å –≤'
                                                                         '—Å–ø–∏—Å–∫–µ –¥–æ–Ω–æ–≤. '
                                                                         '–ñ–∞–ª—å, —á—Ç–æ –≤—ã –±–æ–ª—å—à–µ –Ω–µ —Å –Ω–∞–º–∏.\n'
                                                                         '–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ '
                                                                         '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n'
                                                                         '–î–µ—Ä–∂–∏ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   int(response)))

                                    else:
                                        self.send_message(event.user_id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                        sleep(0.5)
                                        self.send_message(int(response), '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—à—ë–ª –≤–∞—Å –≤'
                                                                         '—Å–ø–∏—Å–∫–µ –¥–æ–Ω–æ–≤.\n'
                                                                         '–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ '
                                                                         '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n'
                                                                         '–î–µ—Ä–∂–∏ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é!',
                                                          keyboard=create_keyboard('–º–µ–Ω—é', self.firebase,
                                                                                   int(response)))

                            # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
                            elif response:
                                self.send_a_message(event.user_id, "–û—à–∏–±–∫–∞! –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", 0)
                                self.send_message(event.user_id, '–î–µ—Ä–∂–∏ –º–µ–Ω—é!', keyboard=create_keyboard('–º–µ–Ω—é',
                                                                                                         self.firebase,
                                                                                                         event.user_id))

            except Exception as e:
                self.send_a_message(160480415, str(e), 0)
                sleep(0.1)


def create_keyboard(response, fb, user_id=0):
    keyboard = VkKeyboard(one_time=True)

    if response == "–ø—Ä–∏–≤–µ—Ç":
        keyboard.add_button('–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–ê–∫—Ü–∏–∏', color=VkKeyboardColor.PRIMARY)

    elif response == "–º–µ–Ω—é":
        current_user = fb.get_user(user_id)
        if current_user == 0 or current_user.subscription == '0':
            keyboard.add_button('–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É ü§ë', color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_button('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–µ üìÑ', color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ', color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ ‚úâ', color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì', color=VkKeyboardColor.SECONDARY)

        else:
            keyboard.add_button('–ü–æ—Ä—Ç—Ñ–µ–ª—å üíº', color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìñ', color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–ê–Ω–∞–ª–∏–∑ üîé', color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã üìà', color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô', color=VkKeyboardColor.SECONDARY)
            keyboard.add_line()
            keyboard.add_button('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì', color=VkKeyboardColor.SECONDARY)

    elif response == '–¢–∏–ø –∞–∫—Ç–∏–≤–∞':
        keyboard.add_button('–ê–∫—Ü–∏—è', color=VkKeyboardColor.PRIMARY)
        '''
        keyboard.add_line()
        keyboard.add_button('–§–æ–Ω–¥', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('ETF', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ò–Ω–¥–µ–∫—Å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–û–±–ª–∏–≥–∞—Ü–∏—è', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–¢–æ–≤–∞—Ä', color=VkKeyboardColor.PRIMARY)
        '''

    elif response == '–°—Ç—Ä–∞–Ω—ã':
        keyboard.add_button('Russia', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('United States', color=VkKeyboardColor.SECONDARY)

    elif response == '–≤–æ–ø—Ä–æ—Å—ã':
        keyboard.add_button('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã üö©', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã ‚úÖ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç ‚Åâ', color=VkKeyboardColor.SECONDARY)

    elif response == '–°—Ç—Ä–∞–Ω—ã_info':
        keyboard.add_button('Russia', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('United States', color=VkKeyboardColor.PRIMARY)

    elif response == '–ê–Ω–∞–ª–∏–∑':
        keyboard.add_button('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚öñ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üìù', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–¢–æ—á–∫–∏ –ø–∏–≤–æ—Ç üí¢', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã üìä', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã üìà', color=VkKeyboardColor.SECONDARY)

    elif response == '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ':
        keyboard.add_button('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ üìå', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ ‚úâ', color=VkKeyboardColor.SECONDARY)

    elif response == '–∫—É–ø–∏–ª/–ø—Ä–æ–¥–∞–ª':
        keyboard.add_button('–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ûï', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ üìú', color=VkKeyboardColor.SECONDARY)

    elif response == '–∫—É–ø–∏–ª/–ø—Ä–æ–¥–∞–ª_2':
        keyboard.add_button('–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ûï', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ ‚ùå', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞ üìù', color=VkKeyboardColor.SECONDARY)

        # keyboard.add_button('–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤ ‚úçüèª', color=VkKeyboardColor.SECONDARY)
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç—Å–µ–ª–∂–∏–≤–∞–Ω–∏—è –∏ % –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π

    elif response == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        keyboard.add_button('–û–ø–æ–≤–µ—â–µ–Ω–∏—è üì©', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üö´', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üóë', color=VkKeyboardColor.SECONDARY)

    elif response == '–ü–æ—Ä—Ç—Ñ–µ–ª—å':
        keyboard.add_button('–ú–æ–∏ –∞–∫—Ç–∏–≤—ã üìÇ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üí∞', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è ‚öñ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–∫—Ç–∏–≤—ã ‚úçüèª', color=VkKeyboardColor.SECONDARY)

    elif response == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        keyboard.add_button('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–µ üìÑ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ üìà', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–õ–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è üìâ', color=VkKeyboardColor.SECONDARY)

    elif response == '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
        keyboard.add_button('–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç ', color=VkKeyboardColor.SECONDARY)

    elif response == '–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å':
        keyboard.add_button('–í–∫–ª—é—á–∏—Ç—å', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–û—Ç–∫–ª—é—á–∏—Ç—å', color=VkKeyboardColor.NEGATIVE)

    elif response == '–ü–µ—Ä–∏–æ–¥':
        keyboard.add_button('5 –º–∏–Ω—É—Ç', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('15 –º–∏–Ω—É—Ç', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('30 –º–∏–Ω—É—Ç', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ß–∞—Å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('5 —á–∞—Å–æ–≤', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–î–µ–Ω—å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ù–µ–¥–µ–ª—è', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ú–µ—Å—è—Ü', color=VkKeyboardColor.PRIMARY)

    elif response == '–ü–µ—Ä–∏–æ–¥_2':
        keyboard.add_button('–î–µ–Ω—å', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–ù–µ–¥–µ–ª—è', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–ú–µ—Å—è—Ü', color=VkKeyboardColor.SECONDARY)

    elif response == '–ü–µ—Ä–∏–æ–¥_':
        keyboard.add_button('–ù–µ–¥–µ–ª—è', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ú–µ—Å—è—Ü', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('3 –º–µ—Å—è—Ü–∞', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('6 –º–µ—Å—è—Ü–µ–≤', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('1 –≥–æ–¥', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('2 –≥–æ–¥–∞', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('5 –ª–µ—Ç', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('10 –ª–µ—Ç', color=VkKeyboardColor.PRIMARY)

    elif response == "–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏":
        keyboard.add_button('–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É', color=VkKeyboardColor.POSITIVE)

    elif response == "–¥–∞/–Ω–µ—Ç":
        keyboard.add_button('–î–∞', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–ù–µ—Ç', color=VkKeyboardColor.NEGATIVE)

    elif response == "–í–∞–ª—é—Ç–∞":
        keyboard.add_button('RUB', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('USD', color=VkKeyboardColor.SECONDARY)

    return keyboard.get_keyboard()


def diff_daily(price_info):
    return price_info.differences_daily


def diff_weekly(price_info):
    return price_info.differences_weekly


def diff_monthly(price_info):
    return price_info.differences_monthly


def checking_prices_t(users, server_checker):
    stocks = []
    for user in users:
        if user.subscription != '0':
            for stock in user.supported_stocks:
                stocks.append(stock)

    for stock in server_checker.firebase.get_spy_stocks():
        stocks.append(stock)

    stocks = set(stocks)
    stocks = list(stocks)
    stock_filtered = []
    data_russia = ip.stocks.get_stocks_overview('russia', n_results=1000)
    data_usa = ip.stocks.get_stocks_overview('united states', n_results=1000)

    for stock in stocks:
        if stock.country == 'russia':
            data_ = data_russia.drop(columns=['name', 'country', 'turnover', 'change', 'change_percentage',
                                              'high', 'low'])
        elif stock.country == 'united states':
            data_ = data_usa.drop(columns=['name', 'country', 'turnover', 'change', 'change_percentage',
                                           'high', 'low'])
        else:
            data_ = ip.stocks.get_stocks_overview(stock.country, n_results=1000)
            data_ = data_.drop(columns=['name', 'country', 'turnover', 'change', 'change_percentage', 'high', 'low'])
        index = 0
        flag = 0
        for symbol in data_['symbol']:
            if symbol == stock.key:
                flag = 1
                break
            index += 1

        if flag:
            stock_filtered.append({stock.key: round(float(data_['last'][index]), 2)})
        else:
            if stock.country == 'russia':
                price_data = yf.download(tickers=str(stock.key) + '.ME', period='0')
                if not price_data.empty:
                    now = price_data['Close'][0]
                    now = round(now, 3)
                    stock_filtered.append({stock.key: now})
                else:
                    server_checker.send_a_message(str(160480415), "–ê–∫—Ü–∏—è " + str(stock.key) + " –Ω–µ —Å–∫–∞—á–∞—Ç—å", 0)
                    continue

            elif stock.country == 'united states':
                price_data = yf.download(tickers=str(stock.key), period='0')
                if not price_data.empty:
                    now = price_data['Close'][0]
                    now = round(now, 3)
                    stock_filtered.append({stock.key: now})
                else:
                    server_checker.send_a_message(str(160480415), "–ê–∫—Ü–∏—è " + str(stock.key) + " –Ω–µ —Å–∫–∞—á–∞—Ç—å", 0)
                    continue
            else:
                server_checker.send_a_message(str(160480415), "–ê–∫—Ü–∏—è " + str(stock.key) + " –Ω–µ —Å–∫–∞—á–∞—Ç—å", 0)
                continue

    for user in users:
        if user.subscription != '0':
            for stock in user.supported_stocks:
                for current_stock in stock_filtered:
                    if (list(current_stock.keys()))[0] == stock.key:
                        now = (list(current_stock.values()))[0]
                        if stock.tracking != 0 and user.alerts == 1:
                            if stock.state == 0 and now > float(stock.profit_margin):
                                server_checker.send_a_message(user.id,
                                                              str(server_checker.get_user_name_from_vk_id(user.id))
                                                              + ", –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏, –ø–æ—Ä–∞ –∑–∞–±–∏—Ä–∞—Ç—å "
                                                                "–¥–µ–Ω—å–≥–∏!\n "
                                                                "–ê–∫—Ü–∏—è "
                                                              + str(stock.key) + " - " + str(now), 0)
                                stock.state = 1
                                stock.last_price = now

                            elif stock.state == 1 and now < 0.9 * float(stock.profit_margin):
                                server_checker.send_a_message(user.id,
                                                              str(server_checker.get_user_name_from_vk_id(user.id))
                                                              + ", –≤—Ä–µ–º—è —É–ø—É—â–µ–Ω–Ω–æ, –¥–µ–Ω–≥–∏ —É—à–ª–∏!\n–ê–∫—Ü–∏—è "
                                                              + str(stock.key) + " - " + str(now), 0)
                                stock.state = 0
                                stock.last_price = now

                            elif stock.state == 0 and now < float(stock.loss_limit):
                                server_checker.send_a_message(user.id,
                                                              str(server_checker.get_user_name_from_vk_id(user.id))
                                                              + ", –ø—Ä–æ–±–∏—Ç –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥, –ø–æ—Ä–∞ –ø—Ä–æ–¥–∞–≤–∞—Ç—å!\n–ê–∫—Ü–∏—è "
                                                              + str(stock.key) + " - " + str(now), 0)
                                stock.state = 2
                                stock.last_price = now

                            elif stock.state == 2 and now > 1.1 * float(stock.loss_limit):
                                server_checker.send_a_message(user.id,
                                                              str(server_checker.get_user_name_from_vk_id(user.id))
                                                              + ", —Ü–µ–Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—å, —É –≤–∞—Å –µ—Å—Ç—å —à–∞–Ω—Å—ã!\n–ê–∫—Ü–∏—è "
                                                              + str(stock.key) + " - " + str(now), 0)
                                stock.state = 0
                                stock.last_price = now

                            else:
                                stock.last_price = now
                                break

                        else:
                            stock.last_price = now
                            break

    for stock in server_checker.firebase.get_spy_stocks():
        for current_stock in stock_filtered:
            if (list(current_stock.keys()))[0] == stock.key:
                now = (list(current_stock.values()))[0]
                if 0.98 * stock.goal <= now <= 1.02 * stock.goal:
                    server_checker.send_a_message(stock.user_id,
                                                  str(server_checker.get_user_name_from_vk_id(stock.user_id))
                                                  + ", —Ü–µ–Ω–∞ –ø–æ –∞–∫—Ü–∏–∏ " + str(stock.key) + " –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!\n"
                                                  + "–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: " + str(now), 0)
                    server_checker.firebase.delete_spy_stock(stock)
                    break


def check_stock(stock):
    try:
        data_ = ip.stocks.get_stocks_overview(stock.country, n_results=1000)
        data_ = data_.drop(columns=['name', 'country', 'turnover', 'change', 'change_percentage', 'high', 'low'])
        flag = 0
        for symbol in data_['symbol']:
            if symbol == stock.key:
                flag = 1
                break

        if flag:
            stock.currency = data_['currency'][0]
            return 1
        else:
            if stock.country == 'russia':
                price_data = yf.download(tickers=str(stock.key) + '.ME', period='0')
                if not price_data.empty:
                    stock.currency = 'RUB'
                    return 1
                else:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ü–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!"

            elif stock.country == 'united states':
                price_data = yf.download(tickers=str(stock.key), period='0')
                if not price_data.empty:
                    stock.currency = 'USD'
                    return 1
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ü–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ü–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!"

    except Exception as e:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ü–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!"


def checking_subscription(users, server_checker_adm):
    for user in users:
        day = dt.datetime.today()
        check_day = user.subscription
        new_format = "%d/%m/%Y"
        day = day.strftime(new_format)
        if check_day == day:
            admins_list = server_checker_adm.firebase.get_admins()
            for admin in admins_list:
                server_checker_adm.send_message(admin, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + "https://vk.com/id" + str(user.id)
                                                + " - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å" + " –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫). \nid " +
                                                str(user.id), server_checker_adm.firebase)
                sleep(0.5)
            server_checker_adm.send_message(str(user.id), "–ü—Ä–æ—à—ë–ª –º–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ—ç—Ç–æ–º—É"
                                                          " –±—ã–ª —Å–¥–µ–ª–∞–Ω –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
                                            server_checker_adm.firebase)

        elif check_day == ((dt.datetime.today() - dt.timedelta(days=1)).strftime(new_format)):
            server_checker_adm.send_message(str(user.id), "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
                                                          " –æ—Ç–∫–ª—é—á–µ–Ω, –µ—Å–ª–∏ —ç—Ç–æ"
                                                          " –æ—à–∏–±–∫–∞ - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                                            server_checker_adm.firebase)
            user.subscription = 0
            server_checker_adm.firebase.change_user(user)


def checking_differences(server_checker_differences):
    active_types = ['stock']
    countries = ['russia', 'united states']
    for type_a in active_types:
        for country in countries:
            if type_a == 'stock':
                data_s = ip.stocks.get_stocks_overview(country, n_results=1000)
                server_checker_differences.firebase.push_price_data(data_s, country)


def independent_analysis(user):
    if len(user.supported_stocks) == 0:
        return '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤!'
    elif len(user.supported_stocks) == 1:
        return '–£ –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤!'
    else:
        today = dt.date.today() - dt.timedelta(days=1)
        past_time = today - dt.timedelta(days=183)
        new_format = "%d/%m/%Y"
        today = today.strftime(new_format)
        past_time = past_time.strftime(new_format)
        table = None

        for stock in user.supported_stocks:
            try:
                if table is None:
                    table = ip.get_stock_historical_data(stock=stock.key.lower(), country=stock.country,
                                                         from_date=str(past_time), to_date=str(today))
                    table = table.drop(columns=['Open', 'High', 'Low', 'Volume', 'Currency'])
                    table.rename(columns={'Close': stock.key}, inplace=True)

                else:
                    table[stock.key] = ip.get_stock_historical_data(stock=stock.key.lower(), country=stock.country,
                                                                    from_date=str(past_time), to_date=str(today)).Close
            except Exception as e:
                if stock.country == 'russia':
                    price_data = yf.download(tickers=str(stock.key) + '.ME', start=today, end=past_time)
                    if not price_data.empty:
                        table[stock.key] = price_data['Close']
                    else:
                        continue

                elif stock.country == 'united states':
                    price_data = yf.download(tickers=str(stock.key), start=today, end=past_time)
                    if not price_data.empty:
                        table[stock.key] = price_data['Close']
                    else:
                        continue

        returns = table.pct_change()
        corr = returns.corr()
        corr_sum = 0.0
        count = 0
        for stock_a in user.supported_stocks:
            for stock_b in user.supported_stocks:
                if stock_a.key == stock_b.key:
                    continue
                corr_sum += round(corr[stock_a.key][stock_b.key], 3)
                count += 1

        try:
            result = corr_sum / count
            return result
        except ZeroDivisionError:
            return '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!'


def technical_analysis(name_of_active, country, product_type, period):
    product_types = ['stock', 'fund', 'etf', 'index', 'bond', 'commodities']
    countries = []
    if product_type not in product_types:
        if product_type == '–∞–∫—Ü–∏—è':
            product_type = product_types[0]
            countries = ip.stocks.get_stock_countries()
        elif product_type == '—Ñ–æ–Ω–¥':
            product_type = product_types[1]
            countries = ip.funds.get_fund_countries()
        elif product_type == 'etf':
            countries = ip.etfs.get_etf_countries()
        elif product_type == '–∏–Ω–¥–µ–∫—Å':
            product_type = product_types[3]
            countries = ip.indices.get_index_countries()
        elif product_type == '–æ–±–ª–∏–≥–∞—Ü–∏—è':
            product_type = product_types[4]
            countries = ip.bonds.get_bond_countries()
        elif product_type == '—Ç–æ–≤–∞—Ä':
            product_type = product_types[5]
            countries = ip.stocks.get_stock_countries()
        else:
            return 'Error in type!'

    if country not in countries:
        return 'Error in country, you may have made a mistake or the country is not supported.'

    if product_type == product_types[0]:
        name_of_active = name_of_active.upper()
        if name_of_active not in ip.stocks.get_stocks_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[1]:
        if name_of_active not in ip.funds.get_funds_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[2]:
        if name_of_active not in ip.etfs.get_etfs_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[3]:
        if name_of_active not in ip.indices.get_indices_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[4]:
        if name_of_active not in ip.bonds.get_bonds_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[5]:
        if name_of_active not in ip.commodities.get_commodities_list():
            return 'Error in name of active!'

    if period == '5 –º–∏–Ω—É—Ç':
        data = ip.moving_averages(name=name_of_active, country=country, product_type=product_type, interval='5mins')
        return data

    elif period == '15 –º–∏–Ω—É—Ç':
        data = ip.moving_averages(name=name_of_active, country=country, product_type=product_type, interval='15mins')
        return data

    elif period == '30 –º–∏–Ω—É—Ç':
        data = ip.moving_averages(name=name_of_active, country=country, product_type=product_type, interval='30mins')
        return data

    elif period == '—á–∞—Å':
        data = ip.moving_averages(name=name_of_active, country=country, product_type=product_type, interval='1hour')
        return data

    elif period == '5 —á–∞—Å–æ–≤':
        data = ip.moving_averages(name=name_of_active, country=country, product_type=product_type, interval='5hours')
        return data

    elif period == '–¥–µ–Ω—å':
        data = ip.moving_averages(name=name_of_active, country=country, product_type=product_type, interval='daily')
        return data

    elif period == '–Ω–µ–¥–µ–ª—è':
        data = ip.moving_averages(name=name_of_active, country=country, product_type=product_type, interval='weekly')
        return data

    elif period == '–º–µ—Å—è—Ü':
        data = ip.moving_averages(name=name_of_active, country=country, product_type=product_type, interval='monthly')
        return data

    else:
        return 'Error in period'


def technical_indicators(name_of_active, country, product_type, period):
    product_types = ['stock', 'fund', 'etf', 'index', 'bond', 'commodities']
    countries = []
    if product_type not in product_types:
        if product_type == '–∞–∫—Ü–∏—è':
            product_type = product_types[0]
            countries = ip.stocks.get_stock_countries()
        elif product_type == '—Ñ–æ–Ω–¥':
            product_type = product_types[1]
            countries = ip.funds.get_fund_countries()
        elif product_type == 'etf':
            countries = ip.etfs.get_etf_countries()
        elif product_type == '–∏–Ω–¥–µ–∫—Å':
            product_type = product_types[3]
            countries = ip.indices.get_index_countries()
        elif product_type == '–æ–±–ª–∏–≥–∞—Ü–∏—è':
            product_type = product_types[4]
            countries = ip.bonds.get_bond_countries()
        elif product_type == '—Ç–æ–≤–∞—Ä':
            product_type = product_types[5]
            countries = ip.stocks.get_stock_countries()
        else:
            return 'Error in type!'

    if country not in countries:
        return 'Error in country, you may have made a mistake or the country is not supported.'

    if product_type == product_types[0]:
        name_of_active = name_of_active.upper()
        if name_of_active not in ip.stocks.get_stocks_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[1]:
        if name_of_active not in ip.funds.get_funds_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[2]:
        if name_of_active not in ip.etfs.get_etfs_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[3]:
        if name_of_active not in ip.indices.get_indices_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[4]:
        if name_of_active not in ip.bonds.get_bonds_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[5]:
        if name_of_active not in ip.commodities.get_commodities_list():
            return 'Error in name of active!'

    if period == '5 –º–∏–Ω—É—Ç':
        data = ip.technical_indicators(name=name_of_active, country=country, product_type=product_type,
                                       interval='5mins')
        return data

    elif period == '15 –º–∏–Ω—É—Ç':
        data = ip.technical_indicators(name=name_of_active, country=country, product_type=product_type,
                                       interval='15mins')
        return data

    elif period == '30 –º–∏–Ω—É—Ç':
        data = ip.technical_indicators(name=name_of_active, country=country, product_type=product_type,
                                       interval='30mins')
        return data

    elif period == '—á–∞—Å':
        data = ip.technical_indicators(name=name_of_active, country=country, product_type=product_type,
                                       interval='1hour')
        return data

    elif period == '5 —á–∞—Å–æ–≤':
        data = ip.technical_indicators(name=name_of_active, country=country, product_type=product_type,
                                       interval='5hours')
        return data

    elif period == '–¥–µ–Ω—å':
        data = ip.technical_indicators(name=name_of_active, country=country, product_type=product_type,
                                       interval='daily')
        return data

    elif period == '–Ω–µ–¥–µ–ª—è':
        data = ip.technical_indicators(name=name_of_active, country=country, product_type=product_type,
                                       interval='weekly')
        return data

    elif period == '–º–µ—Å—è—Ü':
        data = ip.technical_indicators(name=name_of_active, country=country, product_type=product_type,
                                       interval='monthly')
        return data

    else:
        return 'Error in period'


def pivot_points(name_of_active, country, product_type, period):
    product_types = ['stock', 'fund', 'etf', 'index', 'bond', 'commodities']
    countries = []
    if product_type not in product_types:
        if product_type == '–∞–∫—Ü–∏—è':
            product_type = product_types[0]
            countries = ip.stocks.get_stock_countries()
        elif product_type == '—Ñ–æ–Ω–¥':
            product_type = product_types[1]
            countries = ip.funds.get_fund_countries()
        elif product_type == 'etf':
            countries = ip.etfs.get_etf_countries()
        elif product_type == '–∏–Ω–¥–µ–∫—Å':
            product_type = product_types[3]
            countries = ip.indices.get_index_countries()
        elif product_type == '–æ–±–ª–∏–≥–∞—Ü–∏—è':
            product_type = product_types[4]
            countries = ip.bonds.get_bond_countries()
        elif product_type == '—Ç–æ–≤–∞—Ä':
            product_type = product_types[5]
            countries = ip.stocks.get_stock_countries()
        else:
            return 'Error in type!'

    if country not in countries:
        return 'Error in country, you may have made a mistake or the country is not supported.'

    if product_type == product_types[0]:
        name_of_active = name_of_active.upper()
        if name_of_active not in ip.stocks.get_stocks_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[1]:
        if name_of_active not in ip.funds.get_funds_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[2]:
        if name_of_active not in ip.etfs.get_etfs_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[3]:
        if name_of_active not in ip.indices.get_indices_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[4]:
        if name_of_active not in ip.bonds.get_bonds_list(country):
            return 'Error in name of active!'
    elif product_type == product_types[5]:
        if name_of_active not in ip.commodities.get_commodities_list():
            return 'Error in name of active!'

    if period == '5 –º–∏–Ω—É—Ç':
        data = ip.technical.pivot_points(name=name_of_active, country=country, product_type=product_type,
                                         interval='5mins')
        return data

    elif period == '15 –º–∏–Ω—É—Ç':
        data = ip.technical.pivot_points(name=name_of_active, country=country, product_type=product_type,
                                         interval='15mins')
        return data

    elif period == '30 –º–∏–Ω—É—Ç':
        data = ip.technical.pivot_points(name=name_of_active, country=country, product_type=product_type,
                                         interval='30mins')
        return data

    elif period == '—á–∞—Å':
        data = ip.technical.pivot_points(name=name_of_active, country=country, product_type=product_type,
                                         interval='1hour')
        return data

    elif period == '5 —á–∞—Å–æ–≤':
        data = ip.technical.pivot_points(name=name_of_active, country=country, product_type=product_type,
                                         interval='5hours')
        return data

    elif period == '–¥–µ–Ω—å':
        data = ip.technical.pivot_points(name=name_of_active, country=country, product_type=product_type,
                                         interval='daily')
        return data

    elif period == '–Ω–µ–¥–µ–ª—è':
        data = ip.technical.pivot_points(name=name_of_active, country=country, product_type=product_type,
                                         interval='weekly')
        return data

    elif period == '–º–µ—Å—è—Ü':
        data = ip.technical.pivot_points(name=name_of_active, country=country, product_type=product_type,
                                         interval='monthly')
        return data

    else:
        return 'Error in period'


def history_of_active(name_of_active, country, product_type, period):
    try:
        product_types = ['stock', 'fund', 'etf', 'index', 'bond', 'commodities']
        countries = []
        if product_type not in product_types:
            if product_type == '–∞–∫—Ü–∏—è':
                product_type = product_types[0]
                countries = ip.stocks.get_stock_countries()
            elif product_type == '—Ñ–æ–Ω–¥':
                product_type = product_types[1]
                countries = ip.funds.get_fund_countries()
            elif product_type == 'etf':
                countries = ip.etfs.get_etf_countries()
            elif product_type == '–∏–Ω–¥–µ–∫—Å':
                product_type = product_types[3]
                countries = ip.indices.get_index_countries()
            elif product_type == '–æ–±–ª–∏–≥–∞—Ü–∏—è':
                product_type = product_types[4]
                countries = ip.bonds.get_bond_countries()
            elif product_type == '—Ç–æ–≤–∞—Ä':
                product_type = product_types[5]
                countries = ip.stocks.get_stock_countries()
            else:
                return '–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∏–ø–µ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!'

        if country not in countries:
            return '–ë—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!'

        if product_type == product_types[0]:
            name_of_active = name_of_active.upper()
            if name_of_active not in ip.stocks.get_stocks_list(country):
                return '–í–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∏–∫–µ—Ä–µ / –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' \
                       '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! '

            if period == '–Ω–µ–¥–µ–ª—è':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=7)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.get_stock_historical_data(stock=name_of_active, country=country,
                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–º–µ—Å—è—Ü':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=31)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.get_stock_historical_data(stock=name_of_active, country=country,
                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '3 –º–µ—Å—è—Ü–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=93)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.get_stock_historical_data(stock=name_of_active, country=country,
                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '6 –º–µ—Å—è—Ü–µ–≤':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=183)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.get_stock_historical_data(stock=name_of_active, country=country,
                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–≥–æ–¥':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=365)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.get_stock_historical_data(stock=name_of_active, country=country,
                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '2 –≥–æ–¥–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=730)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.get_stock_historical_data(stock=name_of_active, country=country,
                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '5 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=1825)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.get_stock_historical_data(stock=name_of_active, country=country,
                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '10 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=3650)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.get_stock_historical_data(stock=name_of_active, country=country,
                                                    from_date=str(past_time), to_date=str(today))
                return data

            else:
                return '–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ!'

        elif product_type == product_types[1]:
            if name_of_active not in ip.funds.get_funds_list(country):
                return '–í–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∏–∫–µ—Ä–µ / –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' \
                       '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! '

            if period == '–Ω–µ–¥–µ–ª—è':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=7)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.funds.get_fund_historical_data(fund=name_of_active, country=country,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–º–µ—Å—è—Ü':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=31)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.funds.get_fund_historical_data(fund=name_of_active, country=country,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '3 –º–µ—Å—è—Ü–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=93)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.funds.get_fund_historical_data(fund=name_of_active, country=country,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '6 –º–µ—Å—è—Ü–µ–≤':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=183)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.funds.get_fund_historical_data(fund=name_of_active, country=country,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–≥–æ–¥':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=365)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.funds.get_fund_historical_data(fund=name_of_active, country=country,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '2 –≥–æ–¥–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=730)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.funds.get_fund_historical_data(fund=name_of_active, country=country,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '5 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=1825)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.funds.get_fund_historical_data(fund=name_of_active, country=country,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '10 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=3650)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.funds.get_fund_historical_data(fund=name_of_active, country=country,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            else:
                return '–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ!'

        elif product_type == product_types[2]:
            if name_of_active not in ip.etfs.get_etfs_list(country):
                return '–í–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∏–∫–µ—Ä–µ / –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' \
                       '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! '

            if period == '–Ω–µ–¥–µ–ª—è':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=7)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.etfs.get_etf_historical_data(etf=name_of_active, country=country,
                                                       from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–º–µ—Å—è—Ü':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=31)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.etfs.get_etf_historical_data(etf=name_of_active, country=country,
                                                       from_date=str(past_time), to_date=str(today))
                return data

            elif period == '3 –º–µ—Å—è—Ü–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=93)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.etfs.get_etf_historical_data(etf=name_of_active, country=country,
                                                       from_date=str(past_time), to_date=str(today))
                return data

            elif period == '6 –º–µ—Å—è—Ü–µ–≤':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=183)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.etfs.get_etf_historical_data(etf=name_of_active, country=country,
                                                       from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–≥–æ–¥':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=365)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.etfs.get_etf_historical_data(etf=name_of_active, country=country,
                                                       from_date=str(past_time), to_date=str(today))
                return data

            elif period == '2 –≥–æ–¥–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=730)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.etfs.get_etf_historical_data(etf=name_of_active, country=country,
                                                       from_date=str(past_time), to_date=str(today))
                return data

            elif period == '5 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=1825)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.etfs.get_etf_historical_data(etf=name_of_active, country=country,
                                                       from_date=str(past_time), to_date=str(today))
                return data

            elif period == '10 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=3650)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.etfs.get_etf_historical_data(etf=name_of_active, country=country,
                                                       from_date=str(past_time), to_date=str(today))
                return data

            else:
                return '–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ!'

        elif product_type == product_types[3]:
            if name_of_active not in ip.indices.get_indices_list(country):
                return '–í–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∏–∫–µ—Ä–µ / –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' \
                       '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! '

            if period == '–Ω–µ–¥–µ–ª—è':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=7)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.indices.get_index_historical_data(index=name_of_active, country=country,
                                                            from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–º–µ—Å—è—Ü':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=31)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.indices.get_index_historical_data(index=name_of_active, country=country,
                                                            from_date=str(past_time), to_date=str(today))
                return data

            elif period == '3 –º–µ—Å—è—Ü–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=93)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.indices.get_index_historical_data(index=name_of_active, country=country,
                                                            from_date=str(past_time), to_date=str(today))
                return data

            elif period == '6 –º–µ—Å—è—Ü–µ–≤':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=183)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.indices.get_index_historical_data(index=name_of_active, country=country,
                                                            from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–≥–æ–¥':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=365)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.indices.get_index_historical_data(index=name_of_active, country=country,
                                                            from_date=str(past_time), to_date=str(today))
                return data

            elif period == '2 –≥–æ–¥–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=730)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.indices.get_index_historical_data(index=name_of_active, country=country,
                                                            from_date=str(past_time), to_date=str(today))
                return data

            elif period == '5 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=1825)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.indices.get_index_historical_data(index=name_of_active, country=country,
                                                            from_date=str(past_time), to_date=str(today))
                return data

            elif period == '10 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=3650)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.indices.get_index_historical_data(index=name_of_active, country=country,
                                                            from_date=str(past_time), to_date=str(today))
                return data

            else:
                return '–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ!'

        elif product_type == product_types[4]:
            if name_of_active not in ip.bonds.get_bonds_list(country):
                return '–í–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∏–∫–µ—Ä–µ / –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' \
                       '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! '

            if period == '–Ω–µ–¥–µ–ª—è':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=7)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.bonds.get_bond_historical_data(bond=name_of_active,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–º–µ—Å—è—Ü':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=31)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.bonds.get_bond_historical_data(bond=name_of_active,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '3 –º–µ—Å—è—Ü–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=93)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.bonds.get_bond_historical_data(bond=name_of_active,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '6 –º–µ—Å—è—Ü–µ–≤':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=183)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.bonds.get_bond_historical_data(bond=name_of_active,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–≥–æ–¥':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=365)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.bonds.get_bond_historical_data(bond=name_of_active,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '2 –≥–æ–¥–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=730)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.bonds.get_bond_historical_data(bond=name_of_active,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '5 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=1825)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.bonds.get_bond_historical_data(bond=name_of_active,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            elif period == '10 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=3650)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.bonds.get_bond_historical_data(bond=name_of_active,
                                                         from_date=str(past_time), to_date=str(today))
                return data

            else:
                return '–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ!'

        elif product_type == product_types[5]:
            if name_of_active not in ip.commodities.get_commodities_list():
                return '–í–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–∏–∫–µ—Ä–µ / –∏–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' \
                       '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! '

            if period == '–Ω–µ–¥–µ–ª—è':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=7)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.commodities.get_commodity_historical_data(commodity=name_of_active, country=country,
                                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–º–µ—Å—è—Ü':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=31)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.commodities.get_commodity_historical_data(commodity=name_of_active, country=country,
                                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '3 –º–µ—Å—è—Ü–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=93)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.commodities.get_commodity_historical_data(commodity=name_of_active, country=country,
                                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '6 –º–µ—Å—è—Ü–µ–≤':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=183)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.commodities.get_commodity_historical_data(commodity=name_of_active, country=country,
                                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '–≥–æ–¥':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=365)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.commodities.get_commodity_historical_data(commodity=name_of_active, country=country,
                                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '2 –≥–æ–¥–∞':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=730)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.commodities.get_commodity_historical_data(commodity=name_of_active, country=country,
                                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '5 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=1825)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.commodities.get_commodity_historical_data(commodity=name_of_active, country=country,
                                                                    from_date=str(past_time), to_date=str(today))
                return data

            elif period == '10 –ª–µ—Ç':
                today = dt.date.today() - dt.timedelta(days=1)
                past_time = today - dt.timedelta(days=3650)
                new_format = "%d/%m/%Y"
                today = today.strftime(new_format)
                past_time = past_time.strftime(new_format)
                data = ip.commodities.get_commodity_historical_data(commodity=name_of_active, country=country,
                                                                    from_date=str(past_time), to_date=str(today))
                return data

            else:
                return '–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ!'

    except Exception as e:
        return str(e)


def build_graph(data):
    data.Close.plot()
    plt.savefig('hist.png')


def active_info(server, user_id, name_of_active, country, product_type):
    hst = history_of_active(name_of_active, country, product_type, '3 –º–µ—Å—è—Ü–∞')
    if isinstance(hst, str):
        server.send_a_message(user_id, hst, 0)

    else:
        hst.Close.plot()
        plt.savefig('h_' + name_of_active + '.png')
        plt.close()
        upload = VkUpload(server.vk_api)
        t_a = technical_analysis(name_of_active, country, product_type, '–Ω–µ–¥–µ–ª—è')
        t_i = technical_indicators(name_of_active, country, product_type, '–º–µ—Å—è—Ü')
        p_p = pivot_points(name_of_active, country, product_type, '–º–µ—Å—è—Ü')

        if product_type == '–∞–∫—Ü–∏—è':
            data_ = ip.stocks.get_stocks_overview(country, n_results=1000)
            data_ = data_.drop(columns=['name', 'country', 'turnover', 'change', 'change_percentage', 'high', 'low'])
            index = 0
            flag = 0
            for symbol in data_['symbol']:
                if symbol == name_of_active:
                    flag = 1
                    break
                index += 1

            data = ip.stocks.get_stock_information(name_of_active, country)
            result_str = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫—Ç–∏–≤–µ " + name_of_active + "\n\n"
            if flag:
                result_str += "–¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: " + str(round(float(data_['last'][index]), 2)) + \
                              ' ' + str(data_['currency'][index]) + "\n"
            else:
                result_str += "–¶–µ–Ω–∞ –≤—á–µ—Ä–∞: " + str(round(float(data["Prev. Close"]), 2)) + "\n"
            result_str += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã: " + data["Dividend (Yield)"] + "\n"
            result_str += "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –≥–æ–¥: " + data["1-Year Change"] + "\n"
            result_str += "–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–≤–∏–¥–µ–Ω–¥–æ–≤: " + data["Next Earnings Date"] + "\n"
            result_str += "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Ö–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –º–µ—Å—è—Ü: " + str(t_a['ema_signal'][0]) + '\n'
            result_str += "\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI: \nValue = " + str(t_i['value'][0]) + \
                          "\nSignal = " + str(t_i['signal'][0]) + "\n\n"
            result_str += "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –ø–∏–≤–æ—Ç –Ω–∞ –º–µ—Å—è—Ü:\n" + 's_3: ' + str(p_p['s3'][0]) + '\ns_2: ' \
                          + str(p_p['s2'][0]) + '\ns_1: ' + str(p_p['s1'][0]) + '\nc_0: ' \
                          + str(p_p['pivot_points'][0]) + '\nr_1: ' + str(p_p['r1'][0]) + '\nr_2: ' \
                          + str(p_p['r2'][0]) + '\nr_3: ' + str(p_p['r3'][0]) + '\n\n'

            result_str += "–ö–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –î–æ–Ω–æ–≤.\n\n"
            result_str += "–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞"
            server.send_message(int(user_id), result_str, 0)
            server.send_photo(user_id, *server.upload_photo(upload, 'h_' + name_of_active + '.png'))
            sleep(0.3)

        else:
            server.send_message(int(user_id), '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ–π—á–∞—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è :-(', 0)
